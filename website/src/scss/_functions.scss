$yiq-text-dark: $black;
$yiq-text-light: $white;
$yiq-contrasted-threshold: 150;

// Color contrast
@function color-yiq($color, $dark: $yiq-text-dark, $light: $yiq-text-light) {
    $r: red($color);
    $g: green($color);
    $b: blue($color);

    $yiq: (($r * 299) + ($g * 587) + ($b * 114)) / 1000;

    @return if($yiq >=$yiq-contrasted-threshold, $dark, $light);
}

// Request a color level
@function color-level($color: $primary, $level: 0) {
    $color-base: if($level > 0, $black, $white);
    $level: abs($level);

    @return mix($color-base, $color, $level * 8%);
}

// Applies the correct CSS rules to an element to give it the elevation specified by $z-value.
// The $z-value must be between 0 and 24.
// If $color has an alpha channel, it will be ignored and overridden. To increase the opacity of the shadow, use
// $opacity-boost.
@function elevation($z-value, $color: $mdc-elevation-baseline-color, $opacity-boost: 0) {
    @if type-of($z-value) !=number or not unitless($z-value) {
        @error "$z-value must be a unitless number, but received '#{$z-value}'";
    }

    @if $z-value < 0 or $z-value>24 {
        @error "$z-value must be between 0 and 24, but received '#{$z-value}'";
    }

    $umbra-z-value: map-get($mdc-elevation-umbra-map, $z-value);
    $penumbra-z-value: map-get($mdc-elevation-penumbra-map, $z-value);
    $ambient-z-value: map-get($mdc-elevation-ambient-map, $z-value);

    $umbra-color: rgba($color, $mdc-elevation-umbra-opacity + $opacity-boost);
    $penumbra-color: rgba($color, $mdc-elevation-penumbra-opacity + $opacity-boost);
    $ambient-color: rgba($color, $mdc-elevation-ambient-opacity + $opacity-boost);

    $box-shadow: (
        #{"#{$umbra-z-value} #{$umbra-color}"},
        #{"#{$penumbra-z-value} #{$penumbra-color}"},
        #{$ambient-z-value} $ambient-color,
      );

    @return $box-shadow;
}